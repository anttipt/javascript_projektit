// Haetaan HTML-elementit DOMista
const board = document.getElementById('game-board');           // Pelilauta, johon kortit lis√§t√§√§n
const scoreDisplay = document.getElementById('score');         // Pisteiden n√§ytt√∂
const timerDisplay = document.getElementById('timer');         // Ajastimen n√§ytt√∂
const difficultySelect = document.getElementById('difficulty');// Vaikeustason valinta
const startBtn = document.getElementById('start-btn');         // Aloituspainike
const bestScoreDisplay = document.getElementById('best-score');// Paras pistem√§√§r√§
const bestTimeDisplay = document.getElementById('best-time');  // Paras aika

// Kaikki mahdolliset emoji-parit
const allEmojis = ['üçé','üçå','üçá','üçì','üçí','üçç','ü•ù','üçâ','üçã','üçë','ü••','üçà'];

// Pelin tilamuuttujat
let flippedCards = [];       // Kortit, jotka on k√§√§nnetty
let lockBoard = false;       // Est√§√§ korttien klikkauksen kun kaksi on auki
let score = 0;               // Nykyinen pistem√§√§r√§
let seconds = 0;             // Kulunut aika sekunteina
let timerInterval = null;    // Ajastimen intervalli
let matchedPairs = 0;        // L√∂ydetyt parit
let totalPairs = 0;          // Peliss√§ olevien parien m√§√§r√§

// Aloituspainikkeen kuuntelija
startBtn.addEventListener('click', startGame);

// Ladataan enn√§tykset pelin alussa
loadBestResults();


// üîÑ Lataa tallennetut enn√§tykset localStoragesta
function loadBestResults() {
  const bestScore = localStorage.getItem('bestScore') || 0;
  const bestTime = localStorage.getItem('bestTime') || '‚àû';
  bestScoreDisplay.textContent = bestScore;
  bestTimeDisplay.textContent = bestTime;
}


// üíæ Tallenna uudet enn√§tykset, jos nykyinen tulos on parempi
function saveBestResults() {
  const prevScore = parseInt(localStorage.getItem('bestScore')) || 0;
  const prevTime = parseInt(localStorage.getItem('bestTime')) || Infinity;

  if (score > prevScore) {
    localStorage.setItem('bestScore', score);
  }
  if (seconds < prevTime) {
    localStorage.setItem('bestTime', seconds);
  }
  loadBestResults(); // P√§ivit√§ n√§kym√§
}


// üéÆ K√§ynnist√§√§ uuden pelin valitulla vaikeustasolla
function startGame() {
  resetGame(); // Tyhjenn√§ edellinen peli

  // M√§√§rit√§ parien m√§√§r√§ vaikeustason mukaan
  const difficulty = difficultySelect.value;
  totalPairs = difficulty === 'easy' ? 4 : difficulty === 'medium' ? 8 : 12;

  // Valitse tarvittava m√§√§r√§ emojeja ja sekoita kortit
  const selectedEmojis = allEmojis.slice(0, totalPairs);
  const cards = [...selectedEmojis, ...selectedEmojis].sort(() => 0.5 - Math.random());

  // Luo kortit ja lis√§√§ ne pelilaudalle
  cards.forEach((emoji, index) => {
    const card = document.createElement('div');
    card.classList.add('card');
    card.dataset.emoji = emoji;
    card.dataset.index = index;
    card.textContent = '';
    card.addEventListener('click', flipCard);
    board.appendChild(card);
  });

  startTimer(); // K√§ynnist√§ ajastin
}


// üîÑ Nollaa pelin tila ja n√§kym√§
function resetGame() {
  board.innerHTML = '';             // Tyhjenn√§ pelilauta
  score = 0;
  seconds = 0;
  matchedPairs = 0;
  flippedCards = [];
  lockBoard = false;
  scoreDisplay.textContent = score;
  timerDisplay.textContent = seconds;
  clearInterval(timerInterval);     // Pys√§yt√§ vanha ajastin
}


// ‚è±Ô∏è K√§ynnist√§√§ ajastimen
function startTimer() {
  timerInterval = setInterval(() => {
    seconds++;
    timerDisplay.textContent = seconds;
  }, 1000);
}


// üé¥ K√§sittelee kortin klikkauksen
function flipCard() {
  if (lockBoard || this.classList.contains('flipped')) return;

  this.classList.add('flipped');
  this.textContent = this.dataset.emoji;
  flippedCards.push(this);

  // Jos kaksi korttia on auki, tarkista pari
  if (flippedCards.length === 2) {
    lockBoard = true;
    checkMatch();
  }
}


// ‚úÖ Tarkistaa, muodostavatko kaksi korttia parin
function checkMatch() {
  const [card1, card2] = flippedCards;

  if (card1.dataset.emoji === card2.dataset.emoji) {
    score += 10;
    matchedPairs++;
    updateScore();
    flippedCards = [];
    lockBoard = false;

    // Jos kaikki parit on l√∂ydetty, peli p√§√§ttyy
    if (matchedPairs === totalPairs) {
      clearInterval(timerInterval);
      saveBestResults();
      alert(`Voitit pelin! Aika: ${seconds} sekuntia`);
    }

  } else {
    // Jos ei ole pari, k√§√§nn√§ takaisin pienen viiveen j√§lkeen
    setTimeout(() => {
      card1.classList.remove('flipped');
      card2.classList.remove('flipped');
      card1.textContent = '';
      card2.textContent = '';
      flippedCards = [];
      lockBoard = false;
    }, 1000);
  }
}


// üî¢ P√§ivitt√§√§ pisteiden n√§kym√§n
function updateScore() {
  scoreDisplay.textContent = score;
}
